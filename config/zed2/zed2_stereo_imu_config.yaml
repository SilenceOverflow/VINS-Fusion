%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2

imu_topic: "/zed2/zed_node/imu/data_raw"
image0_topic: "/zed2/zed_node/left_raw/image_raw_gray"
image1_topic: "/zed2/zed_node/right_raw/image_raw_gray"
output_path: "output/"
cam0_calib: "left.yaml"
cam1_calib: "right.yaml"
image_width: 672
image_height: 376


# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ 0.00284496,  0.00387706,  0.99998844,  0.0225266,
        -0.99998998, -0.00344601,  0.00285833,  0.02162648,
        0.00345705, -0.99998655,  0.00386722, -0.00182277,
        0., 0., 0., 1. ]

body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [0.00068642,  0.00406985,  0.99999148,  0.02308871,
        -0.99999479, -0.00315212,  0.00069925, -0.09825984,
        0.00315494, -0.99998675,  0.00406766, -0.00127293,
        0., 0., 0., 1. ]

#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.1  # max solver itration time (ms), to guarantee real time
max_num_iterations: 100   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.0016          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.007         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.0002509         # accelerometer bias random work noise standard deviation.  #0.002
gyr_w: 0.0019474       # gyroscope bias random work noise standard deviation.     #4.0e-5

# acc_n: 0.0012672304695120478          # accelerometer measurement noise standard deviation. #0.2   0.04
# gyr_n: 9.348232978685138e-05         # gyroscope measurement noise standard deviation.     #0.05  0.004
# acc_w: 5.43731844724004e-05         # accelerometer bias random work noise standard deviation.  #0.002
# gyr_w: 2.9283391490875493e-07       # gyroscope bias random work noise standard deviation.     #4.0e-5

g_norm: 9.81007         # gravity magnitude

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.0095                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/dji/output/pose_graph/" # save and load path
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
